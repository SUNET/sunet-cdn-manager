global
        log stdout  format raw  local0  debug
        stats socket /haproxy-stats/stats.sock mode 600
        stats timeout 30s

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

        # Make sure we do not leave an unbounded number of busy workers when
        # reloading the configuration.
        mworker-max-reloads 10

        # Make sure a process does not not get stuck forever in soft-stop
        # shutdown even if connections are remaining open.
        hard-stop-after 600s

        # Set a static localpeer name so we can sync stick-table contents
        # during reload with ourselves without having to care about the actual
        # hostname of the node we are running on.
        localpeer local_haproxy

peers mypeers
        peer local_haproxy /haproxy-local/local_haproxy_peer

defaults
        log     global
        mode    http
        option  httplog
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /usr/local/etc/haproxy/errors/400.http
        errorfile 403 /usr/local/etc/haproxy/errors/403.http
        errorfile 408 /usr/local/etc/haproxy/errors/408.http
        errorfile 500 /usr/local/etc/haproxy/errors/500.http
        errorfile 502 /usr/local/etc/haproxy/errors/502.http
        errorfile 503 /usr/local/etc/haproxy/errors/503.http
        errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend service
{{- range $index, $addr := .AddressStrings}}
{{- if $.HTTPEnabled}}
        bind {{$addr}}:80
{{- end}}
{{- if $.HTTPSEnabled}}
        bind {{$addr}}:443 ssl crt /certs-private
{{- end}}
{{- end}}
        default_backend varnish

backend varnish
        server varnish /shared/unix-sockets/varnish send-proxy-v2 proxy-v2-options ssl

{{if $.HTTPSEnabled -}}
frontend haproxy_https
        bind /shared/unix-sockets/haproxy_https accept-proxy mode 660
        stick-table type ipv6 size 1m peers mypeers
        stick on src
        default_backend haproxy_https

backend haproxy_https
{{- range $index, $origin := .Origins}}
{{- if $origin.TLS}}
        {{- if $origin.VerifyTLS}}
        server s{{$index}} {{$origin.Host}}:{{$origin.Port}} ssl ca-file /etc/ssl/certs/ca-certificates.crt alpn http/1.1 sni req.hdr(host)
        {{- else}}
        server s{{$index}} {{$origin.Host}}:{{$origin.Port}} ssl verify none alpn http/1.1 sni req.hdr(host)
        {{- end }}
{{- end}}
{{- end}}
{{end}}

{{if $.HTTPEnabled}}
# While varnish could recach out to HTTP backends itself, lets stick to one
# place (haproxy) for dealing with loadbalancing etc.
frontend haproxy_http
        bind /shared/unix-sockets/haproxy_http accept-proxy mode 660
        stick-table type ipv6 size 1m peers mypeers
        stick on src
        default_backend haproxy_http

backend haproxy_http
{{- range $index, $origin := .Origins}}
{{if not $origin.TLS}}
        server s{{$index}} {{$origin.Host}}:{{$origin.Port}}
{{- end}}
{{- end}}
{{end}}
