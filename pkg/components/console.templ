package components

import (
	"errors"
	"fmt"
	"github.com/SUNET/sunet-cdn-manager/pkg/cdnerrors"
	"github.com/SUNET/sunet-cdn-manager/pkg/types"
	"strconv"
)

templ ConsolePage(title string, orgs []string, contents templ.Component) {
	<html>
		@headerComponent(title)
		<body>
			@Logout()
			@OrgSelector(orgs)
			@NavBar()
			<h1>{ title }</h1>
			<div id="contents">
				@contents
			</div>
		</body>
	</html>
}

templ headerComponent(title string) {
	<head><title>{ title }</title></head>
}

templ Home(username string) {
	<div>Hello { username }!</div>
}

templ Logout() {
	<div class="logout">
		<div><a href={ templ.URL("/auth/logout") }>Logout</a></div>
	</div>
}

templ OrgSelector(orgs []string) {
	<form action={ templ.URL("/console") }>
		@CSRF()
		<label for="orgs">Organization:</label>
		<select name="orgs" id="orgs" disabled?={ len(orgs) < 2 }>
			if len(orgs) == 0 {
				<option value="undefined">undefined</option>
			} else {
				for _, org := range orgs {
					<option value={ org }>{ org }</option>
				}
			}
		</select>
		<input type="submit"/>
	</form>
}

templ NavBar() {
	<div>
		<nav>
			<ul>
				<li><a href={ templ.URL("/console") }>Home</a></li>
				<li><a href={ templ.URL("/console/services") }>Services</a></li>
			</ul>
		</nav>
	</div>
}

templ ServicesContent(services []types.Service) {
	if len(services) == 0 {
		<div>No services created</div>
	} else {
		<div>Services:</div>
		<ul>
			for _, service := range services {
				<li><a href={ templ.URL(fmt.Sprintf("/console/services/%s", service.Name)) }>{ service.Name }</a></li>
			}
		</ul>
	}
	<a href={ templ.URL("/console/create-service") }>Create service</a>
}

templ ServiceContent(serviceName string, serviceVersions []types.ServiceVersion) {
	if len(serviceVersions) == 0 {
		<div>No versions created</div>
	} else {
		<div>Versions:</div>
		<ul>
			for _, sv := range serviceVersions {
				<li><a href={ templ.URL(fmt.Sprintf("/console/services/%s/%d", serviceName, sv.Version)) }>{ strconv.FormatInt(sv.Version, 10) }</a></li>
			}
		</ul>
	}
	<a href={ templ.URL(fmt.Sprintf("/console/create-service-version/%s", serviceName)) }>Create service version</a>
}

templ CreateServiceContent(err error) {
	<form method="post" action={ templ.URL("/console/create-service") }>
		@CSRF()
		<label for="name">Name:</label>
		<input type="text" id="name" name="name"/>
		<input type="submit"/>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrAlreadyExists):
				<div>Service already exists</div>
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			default:
				<div>Service creation failed</div>
		}
	}
}

templ ServiceVersionContent(serviceName string, sv types.ServiceVersionConfig) {
	<table>
		<tr>
			<th>ID</th>
			<th>Service ID</th>
			<th>Version</th>
			<th>Active</th>
			<th>VCL Recv</th>
			<th>Origins</th>
			<th>Domains</th>
		</tr>
		<tr>
			<td>{ sv.ID.String() }</td>
			<td>{ sv.ServiceID.String() }</td>
			<td>{ strconv.FormatInt(sv.Version, 10) }</td>
			<td>{ strconv.FormatBool(sv.Active) }</td>
			<td>{ sv.VclRecvContent }</td>
			<td>
				for _, origin := range sv.Origins {
					<ul>
						<li>Host: { origin.Host }</li>
						<li>Port: { strconv.Itoa(origin.Port) }</li>
						<li>TLS: { strconv.FormatBool(origin.TLS) }</li>
					</ul>
				}
			</td>
			<td>
				for _, domain := range sv.Domains {
					<ul>
						<li>Domain: { domain }</li>
					</ul>
				}
			</td>
		</tr>
	</table>
}

templ CreateServiceVersionContent(serviceName string, err error) {
	<form method="post" action={ templ.URL(fmt.Sprintf("/console/create-service-version/%s", serviceName)) }>
		@CSRF()
		<label for="domains">Domains:</label>
		<input type="text" id="domains" name="domains"/>
		<fieldset>
			<legend>Origins:</legend>
			<label for="origins">Origins:</label>
			<input type="text" id="origins" name="origins"/>
			<label for="origins-tls">TLS:</label>
			<input type="checkbox" id="origins-tls" name="origins-tls"/>
		</fieldset>
		<label for="vcl_recv">VCL recv:</label>
		<textarea id="vcl_recv" name="vcl_recv" placeholder="Enter your VLC here..."></textarea>
		<input type="submit"/>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			default:
				<div>Service version creation failed</div>
		}
	}
}

templ LoginPage(returnTo string, loginFailed bool) {
	<h1>Login</h1>
	<h2>Local</h2>
	<form method="post" action={ templ.URL("/auth/login") }>
		@CSRF()
		if returnTo != "" {
			<input type="hidden" name="return_to" value={ returnTo }/>
		}
		<label for="username">Username:</label>
		<br/>
		<input type="text" id="username" name="username"/>
		<br/>
		<label for="password">Password:</label>
		<br/>
		<input type="password" id="password" name="password"/>
		<input type="submit" value="Login"/>
	</form>
	if loginFailed {
		<div>Login failed!</div>
	}
	<h2>OpenID Connect</h2>
	<div><a href={ templ.URL("/auth/oidc/keycloak") }>Login with Keycloak</a></div>
}

// https://templ.guide/integrations/web-frameworks/#githubcomgorillacsrf
templ CSRF() {
	<input type="hidden" name="gorilla.csrf.Token" value={ ctx.Value("gorilla.csrf.Token").(string) }/>
}
