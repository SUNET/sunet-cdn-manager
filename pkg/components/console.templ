package components

import (
	"errors"
	"fmt"
	"github.com/SUNET/sunet-cdn-manager/pkg/cdnerrors"
	"github.com/SUNET/sunet-cdn-manager/pkg/types"
	"strconv"
)

templ ConsolePage(title string, ad types.AuthData, contents templ.Component) {
	<!DOCTYPE html>
	<html>
		@consoleHeadComponent(title)
		// hx-headers used to include CSRF token in AJAX requests
		// https://htmx.org/docs/#csrf-prevention
		<body hx-boost="true" hx-headers={ jsonHxHeaders(ctx.Value("gorilla.csrf.Token").(string)) }>
			<div class="console-grid">
				<header>
					<span>
						SUNET CDN manager
					</span>
					<span class="place-end">
						{ ad.Username } <a href={ templ.URL("/auth/logout") } hx-boost="false">Logout</a>
					</span>
				</header>
				@NavBar()
				<main>
					<h1>{ title }</h1>
					<div id="contents">
						@contents
					</div>
				</main>
			</div>
		</body>
	</html>
}

templ consoleHeadComponent(title string) {
	<head>
		// Enable htmx
		<script src="/js/dist/htmx/2.0.4/htmx.min.js"></script>
		// Enable _hyperscript
		<script src="/js/dist/_hyperscript/0.9.14/_hyperscript.min.js"></script>
		@picoCssLinks()
		// Configure the grid layout of the console
		<link rel="stylesheet" href="/css/console-grid.css"/>
		<title>{ title }</title>
	</head>
}

templ picoCssLinks() {
	// Enable Pico CSS
	<link rel="stylesheet" href="/css/dist/pico-2.1.1/css/pico.min.css"/>
	// Set some variables for Pico CSS to make things a bit smaller
	// https://github.com/picocss/pico/discussions/482
	<link rel="stylesheet" href="/css/pico-settings.css"/>
}

templ Dashboard(username string) {
	<div>Hello { username }!</div>
}

templ NavBar() {
	<div class="sidebar">
		<aside>
			<nav>
				<ul>
					<li><a href={ templ.URL("/console") }>Dashboard</a></li>
					<li><a href={ templ.URL("/console/domains") }>Domains</a></li>
					<li><a href={ templ.URL("/console/services") }>Services</a></li>
				</ul>
			</nav>
		</aside>
	</div>
}

templ flashMessagesComponent(flashMessages []string) {
	if len(flashMessages) != 0 {
		<div class="flash-container" _="on load transition my opacity to 0 over 5 seconds then remove me">
			for _, flashMessage := range flashMessages {
				<article>
					{ flashMessage }
				</article>
			}
		</div>
	}
}

templ DomainsContent(domains []types.Domain, verificationTag string, tagSeparator string, flashMessages []string) {
	@flashMessagesComponent(flashMessages)
	if len(domains) == 0 {
		<div>No domains added</div>
	} else {
		<table>
			<tr>
				<th>Domain</th>
				<th>Verified</th>
				<th>Verification record</th>
				<th>Actions</th>
			</tr>
			for _, domain := range domains {
				<tr>
					<td>{ domain.Name }</td>
					if domain.Verified {
						<td>✅</td>
					} else {
						<td>⏳</td>
					}
					<td>{ domain.Name }. IN TXT "{ verificationTag }{ tagSeparator }{ domain.VerificationToken }"</td>
					<td>
						<button
							hx-delete={ string(templ.URL(fmt.Sprintf("/console/domains/%s", domain.Name))) }
							hx-target="body"
							hx-confirm={ fmt.Sprintf("Are you sure you want to delete '%s'?", domain.Name) }
						>
							Delete
						</button>
					</td>
				</tr>
			}
		</table>
	}
	<a href={ templ.URL("/console/create/domain") }>Add domain</a>
}

templ ServicesContent(services []types.Service, flashMessages []string) {
	@flashMessagesComponent(flashMessages)
	if len(services) == 0 {
		<div>No services created</div>
	} else {
		<table>
			<tr>
				<th>Service</th>
				<th>Actions</th>
			</tr>
			for _, service := range services {
				<tr>
					<td><a href={ templ.URL(fmt.Sprintf("/console/services/%s?org=%s", service.Name, service.OrgName)) }>{ service.Name }</a></td>
					<td>
						<button
							hx-delete={ string(templ.URL(fmt.Sprintf("/console/services/%s?org=%s", service.Name, service.OrgName))) }
							hx-target="body"
							hx-confirm={ fmt.Sprintf("Are you sure you want to delete '%s'?", service.Name) }
						>
							Delete
						</button>
					</td>
				</tr>
			}
		</table>
	}
	<a href={ templ.URL("/console/create/service") }>Create service</a>
}

templ ServiceContent(orgName string, serviceName string, serviceVersions []types.ServiceVersion) {
	if len(serviceVersions) == 0 {
		<div>No versions created</div>
	} else {
		<table>
			<tr>
				<th>Version</th>
				<th>Active</th>
				<th>Actions</th>
			</tr>
			for _, sv := range serviceVersions {
				<tr>
					<td>
						<a href={ templ.URL(fmt.Sprintf("/console/services/%s/%d?org=%s", sv.ServiceName, sv.Version, sv.OrgName)) }>{ strconv.FormatInt(sv.Version, 10) }</a>
					</td>
					<td>
						{ strconv.FormatBool(sv.Active) }
					</td>
					<td>
						<button
							hx-get={ string(templ.URL(fmt.Sprintf("/console/services/%s/%d/activate?org=%s", sv.ServiceName, sv.Version, sv.OrgName))) }
							hx-target="body"
							disabled?={ sv.Active }
						>
							Activate
						</button>
						<button
							hx-get={ string(templ.URL(fmt.Sprintf("/console/create/service-version/%s?org=%s&clone-version=%d", serviceName, orgName, sv.Version))) }
							hx-target="body"
							hx-push-url="true"
						>
							Clone
						</button>
					</td>
				</tr>
			}
		</table>
	}
	<a href={ templ.URL(fmt.Sprintf("/console/create/service-version/%s?org=%s", serviceName, orgName)) }>Create service version</a>
}

templ CreateDomainContent(dData DomainData) {
	<span class="error">{ dData.Errors.ServerError }</span>
	<form method="post" action={ templ.URL("/console/create/domain") }>
		@CSRF()
		<label for="name">
			Name
			<input type="text" id="name" name="name" placeholder="Enter domain name..." value={ dData.Name }/>
		</label>
		<span class="error">{ dData.Errors.Name }</span>
		<button type="submit">Add domain</button>
	</form>
}

templ CreateServiceContent(err error) {
	<form method="post" action={ templ.URL("/console/create/service") }>
		@CSRF()
		<label for="name">
			Name
			<input type="text" id="name" name="name" placeholder="Enter service name, e.g. my-service-1..."/>
		</label>
		<button type="submit">Add service</button>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrAlreadyExists):
				<div>Service already exists</div>
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			default:
				<div>Service creation failed</div>
		}
	}
}

templ ServiceVersionContent(serviceName string, sv types.ServiceVersionConfig, vclKeyToConf map[string]string) {
	<table>
		<tr>
			<th>ID</th>
			<th>Service ID</th>
			<th>Version</th>
			<th>Active</th>
			for k := range vclKeyToConf {
				<th>{ k }</th>
			}
			<th>Origins</th>
			<th>Domains</th>
		</tr>
		<tr>
			<td>{ sv.ID.String() }</td>
			<td>{ sv.ServiceID.String() }</td>
			<td>{ strconv.FormatInt(sv.Version, 10) }</td>
			<td>{ strconv.FormatBool(sv.Active) }</td>
			for _, conf := range vclKeyToConf {
				<td>{ conf }</td>
			}
			<td>
				for _, origin := range sv.Origins {
					<ul>
						<li>Host: { origin.Host }</li>
						<li>Port: { strconv.Itoa(origin.Port) }</li>
						<li>TLS: { strconv.FormatBool(origin.TLS) }</li>
						<li>Verify TLS: { strconv.FormatBool(origin.VerifyTLS) }</li>
					</ul>
				}
			</td>
			<td>
				for _, domain := range sv.Domains {
					<ul>
						<li>Domain: { domain.String() }</li>
					</ul>
				}
			</td>
		</tr>
	</table>
}

templ OriginFieldSet(index int, numFields int, cloneOrigin types.Origin, htmxRequest bool) {
	<article id={ fmt.Sprintf("article-%s", strconv.Itoa(index)) }>
		<fieldset>
			<legend>Origin</legend>
			<label for={ fmt.Sprintf("origins.%d.host", index) }>
				Host
				<input type="text" id={ fmt.Sprintf("origins.%d.host", index) } name={ fmt.Sprintf("origins.%d.host", index) } value={ cloneOrigin.Host }/>
			</label>
			<label for={ fmt.Sprintf("origins.%d.port", index) }>
				Port
				{{
			originPortStr := ""
			if cloneOrigin.Port != 0 {
				originPortStr = strconv.Itoa(cloneOrigin.Port)

			}
				}}
				<input type="text" id={ fmt.Sprintf("origins.%d.port", index) } name={ fmt.Sprintf("origins.%d.port", index) } value={ originPortStr }/>
			</label>
			<label for={ fmt.Sprintf("origins.%d.tls", index) }>
				TLS
				<input type="checkbox" id={ fmt.Sprintf("origins.%d.tls", index) } name={ fmt.Sprintf("origins.%d.tls", index) } checked?={ cloneOrigin.TLS }/>
			</label>
			<label for={ fmt.Sprintf("origins.%d.verify-tls", index) }>
				Verify TLS
				<input type="checkbox" id={ fmt.Sprintf("origins.%d.verify-tls", index) } name={ fmt.Sprintf("origins.%d.verify-tls", index) } checked?={ cloneOrigin.VerifyTLS }/>
			</label>
		</fieldset>
		@deleteOriginButton(strconv.Itoa(index), numFields == 1)
	</article>
	if htmxRequest {
		// If this function is called by http handler (e.g.
		// because of a hx-get) we also need to replace the "add
		// button" counter.
		@addOriginButton(strconv.Itoa(index+1), true)
	}
}

templ addOriginButton(index string, swap bool) {
	<button
		id="add-origin-fieldset-button"
		hx-get="/console/new-origin-fieldset"
		hx-swap="beforeend"
		hx-target="#origin-fieldsets"
		name="next-origin-index"
		value={ index }
		if swap {
			hx-swap-oob="true"
		}
	>
		Add origin
	</button>
}

templ deleteOriginButton(index string, disabled bool) {
	<button
		_="on click remove closest <article/> then send manager:origindeleted to #origin-fieldsets"
		disabled?={ disabled }
	>
		Delete origin
	</button>
}

templ CreateServiceVersionContent(serviceName string, orgName string, vclSK types.VclStepKeys, domains []types.Domain, cloneData types.ServiceVersionCloneData, err error, errDetails string) {
	<form method="post" action={ templ.URL(fmt.Sprintf("/console/create/service-version/%s?org=%s", serviceName, orgName)) }>
		@CSRF()
		<article>
			<fieldset>
				<legend>Domains</legend>
				if len(domains) == 0 {
					<div>No domains available</div>
				} else {
					for i, domain := range domains {
						if domain.Verified {
							<label for={ fmt.Sprintf("domains.%d", i) }>
								{ domain.Name }
								{{
							var precheck bool
							for _, cloneDomain := range cloneData.Domains {
								if string(cloneDomain) == domain.Name {
									precheck = true
									break
								}
							}
								}}
								<input type="checkbox" id={ fmt.Sprintf("domains.%d", i) } name="domains" value={ domain.Name } checked?={ precheck }/>
							</label>
						}
					}
				}
			</fieldset>
		</article>
		<div
			id="origin-fieldsets"
			_="on manager:origindeleted
				make a RegExp from '\\.\\d+\\.' called idRE
				repeat for article in <#origin-fieldsets > article/> index i
					set the article's id to `article-` + i
					repeat in <[for]/> in the article
						set its @for to (its @for).replace(idRE, `.${i}.`)
					end
					repeat in <[id]/> in the article
						set its @id to (its @id).replace(idRE, `.${i}.`)
					end
					repeat in <[name]/> in the article
						set its @name to (its @name).replace(idRE, `.${i}.`)
					end
				end
				set #add-origin-fieldset-button @value to (<#origin-fieldsets > article/>).length
				if (<#origin-fieldsets > article/>).length == 1
					add @disabled to <#article-0 > button/>
				end
			on htmx:afterSwap
				if (<#origin-fieldsets > article/>).length > 1
					remove @disabled from <#article-0 > button/>
				end
			"
		>
			if len(cloneData.Origins) == 0 {
				@OriginFieldSet(0, 1, types.Origin{}, false)
			} else {
				for i, cloneOrigin := range cloneData.Origins {
					@OriginFieldSet(i, len(cloneData.Origins), cloneOrigin, false)
				}
			}
		</div>
		{{
			var nextOriginIndexStr string
			if len(cloneData.Origins) == 0 {
				// If there is no clone data the next index is 1
				nextOriginIndexStr = "1"
			} else {
				nextOriginIndexStr = strconv.Itoa(len(cloneData.Origins))
			}
		}}
		@addOriginButton(nextOriginIndexStr, false)
		{{ cloneVclStepsMap := types.VclStepsToMap(cloneData.VclSteps) }}
		<article>
			<fieldset>
				<legend>VCL steps</legend>
				for _, vclStep := range vclSK.FieldOrder {
					<div>
						<label for={ vclSK.FieldToKey[vclStep] }>
							{ vclSK.FieldToKey[vclStep] }
							<textarea id={ vclSK.FieldToKey[vclStep] } name={ vclSK.FieldToKey[vclStep] } placeholder="Enter your VCL here...">{ cloneVclStepsMap[vclSK.FieldToKey[vclStep]] }</textarea>
						</label>
					</div>
				}
			</fieldset>
		</article>
		<button type="submit">Add service version</button>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			case errors.Is(err, cdnerrors.ErrInvalidVCL):
				<div>Invalid VCL data</div>
				<pre>{ errDetails }</pre>
			default:
				<div>Service version creation failed</div>
		}
	}
}

templ ActivateServiceVersionContent(orgName string, serviceName string, version int64, err error) {
	<div>You are about to activate { serviceName } version { strconv.FormatInt(version, 10) }, are you sure?</div>
	<form method="post" action={ templ.URL(fmt.Sprintf("/console/services/%s/%d/activate?org=%s", serviceName, version, orgName)) }>
		@CSRF()
		<label for="confirmation">
			Yes I am sure
			<input type="checkbox" id="confirmation" name="confirmation"/>
		</label>
		<button type="submit">Activate version</button>
	</form>
	if err != nil {
		<div>Service version activation failed</div>
	}
}

templ LoginPage(returnTo string, loginFailed bool) {
	<!DOCTYPE html>
	<head>
		@picoCssLinks()
		// Configure the grid layout of the login page
		<link rel="stylesheet" href="/css/login-grid.css"/>
		<title>SUNET CDN Manager Login</title>
	</head>
	<html>
		<div class="login-container">
			<div class="login-title">
				<h1>SUNET CDN Manager</h1>
			</div>
			<div class="login-form">
				<h2>Local</h2>
				<form method="post" action={ templ.URL("/auth/login") }>
					@CSRF()
					if returnTo != "" {
						<input type="hidden" name="return_to" value={ returnTo }/>
					}
					<label for="username">Username</label>
					<br/>
					<input type="text" id="username" name="username"/>
					<br/>
					<label for="password">Password</label>
					<br/>
					<input type="password" id="password" name="password"/>
					<button type="submit">Login</button>
				</form>
				if loginFailed {
					<div>Login failed!</div>
				}
				<h2>OpenID Connect</h2>
				<div><a href={ templ.URL("/auth/oidc/keycloak") }>Login with Keycloak</a></div>
			</div>
		</div>
	</html>
}

// https://templ.guide/integrations/web-frameworks/#githubcomgorillacsrf
templ CSRF() {
	<input type="hidden" name="gorilla.csrf.Token" value={ ctx.Value("gorilla.csrf.Token").(string) }/>
}
