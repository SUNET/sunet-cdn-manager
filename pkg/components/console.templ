package components

import (
	"errors"
	"fmt"
	"github.com/SUNET/sunet-cdn-manager/pkg/cdnerrors"
	"github.com/SUNET/sunet-cdn-manager/pkg/types"
	"strconv"
)

templ ConsolePage(title string, ad types.AuthData, contents templ.Component) {
	<!DOCTYPE html>
	<html>
		@headerComponent(title)
		<body>
			@Logout(ad.Username)
			@NavBar()
			<h1>{ title }</h1>
			<div id="contents">
				@contents
			</div>
		</body>
	</html>
}

templ headerComponent(title string) {
	<head><title>{ title }</title></head>
}

templ Dashboard(username string) {
	<div>Hello { username }!</div>
}

templ Logout(username string) {
	<div class="logout">
		<div><a href={ templ.URL("/auth/logout") }>Logout</a> { username }</div>
	</div>
}

templ NavBar() {
	<div>
		<nav>
			<ul>
				<li><a href={ templ.URL("/console") }>Dashboard</a></li>
				<li><a href={ templ.URL("/console/domains") }>Domains</a></li>
				<li><a href={ templ.URL("/console/services") }>Services</a></li>
			</ul>
		</nav>
	</div>
}

templ DomainsContent(domains []types.Domain, verificationTag string, tagSeparator string) {
	if len(domains) == 0 {
		<div>No domains added</div>
	} else {
		<div>Domains:</div>
		<table>
			<tr>
				<th>Domain name</th>
				<th>Verified</th>
				<th>Verification record</th>
			</tr>
			for _, domain := range domains {
				<tr>
					<td>{ domain.Name }</td>
					if domain.Verified {
						<td>✅</td>
					} else {
						<td>⏳</td>
					}
					<td>{ domain.Name }. IN TXT "{ verificationTag }{ tagSeparator }{ domain.VerificationToken }"</td>
				</tr>
			}
		</table>
	}
	<a href={ templ.URL("/console/create/domain") }>Add domain</a>
}

templ ServicesContent(services []types.Service) {
	if len(services) == 0 {
		<div>No services created</div>
	} else {
		<div>Services:</div>
		<ul>
			for _, service := range services {
				<li><a href={ templ.URL(fmt.Sprintf("/console/services/%s?org=%s", service.Name, service.OrgName)) }>{ service.Name }</a></li>
			}
		</ul>
	}
	<a href={ templ.URL("/console/create/service") }>Create service</a>
}

templ ServiceContent(orgName string, serviceName string, serviceVersions []types.ServiceVersion) {
	if len(serviceVersions) == 0 {
		<div>No versions created</div>
	} else {
		<table>
			<tr>
				<th>Version</th>
				<th>Active</th>
				<th>Activate version</th>
			</tr>
			for _, sv := range serviceVersions {
				<tr>
					<td>
						<a href={ templ.URL(fmt.Sprintf("/console/services/%s/%d?org=%s", sv.ServiceName, sv.Version, sv.OrgName)) }>{ strconv.FormatInt(sv.Version, 10) }</a>
					</td>
					<td>
						{ strconv.FormatBool(sv.Active) }
					</td>
					<td>
						<a href={ templ.URL(fmt.Sprintf("/console/services/%s/%d/activate?org=%s", sv.ServiceName, sv.Version, sv.OrgName)) }>Activate version</a>
					</td>
				</tr>
			}
		</table>
	}
	<a href={ templ.URL(fmt.Sprintf("/console/create/service-version/%s?org=%s", serviceName, orgName)) }>Create service version</a>
}

templ CreateDomainContent(err error) {
	<form method="post" action={ templ.URL("/console/create/domain") }>
		@CSRF()
		<label for="name">Name:</label>
		<input type="text" id="name" name="name"/>
		<input type="submit"/>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrAlreadyExists):
				<div>Domain already exists</div>
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			default:
				<div>Domain creation failed</div>
		}
	}
}

templ CreateServiceContent(err error) {
	<form method="post" action={ templ.URL("/console/create/service") }>
		@CSRF()
		<label for="name">Name:</label>
		<input type="text" id="name" name="name"/>
		<input type="submit"/>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrAlreadyExists):
				<div>Service already exists</div>
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			default:
				<div>Service creation failed</div>
		}
	}
}

templ ServiceVersionContent(serviceName string, sv types.ServiceVersionConfig, vclKeyToConf map[string]string) {
	<table>
		<tr>
			<th>ID</th>
			<th>Service ID</th>
			<th>Version</th>
			<th>Active</th>
			for k := range vclKeyToConf {
				<th>{ k }</th>
			}
			<th>Origins</th>
			<th>Domains</th>
		</tr>
		<tr>
			<td>{ sv.ID.String() }</td>
			<td>{ sv.ServiceID.String() }</td>
			<td>{ strconv.FormatInt(sv.Version, 10) }</td>
			<td>{ strconv.FormatBool(sv.Active) }</td>
			for _, conf := range vclKeyToConf {
				<td>{ conf }</td>
			}
			<td>
				for _, origin := range sv.Origins {
					<ul>
						<li>Host: { origin.Host }</li>
						<li>Port: { strconv.Itoa(origin.Port) }</li>
						<li>TLS: { strconv.FormatBool(origin.TLS) }</li>
						<li>Verify TLS: { strconv.FormatBool(origin.VerifyTLS) }</li>
					</ul>
				}
			</td>
			<td>
				for _, domain := range sv.Domains {
					<ul>
						<li>Domain: { domain.String() }</li>
					</ul>
				}
			</td>
		</tr>
	</table>
}

templ CreateServiceVersionContent(serviceName string, orgName string, vclSK types.VclStepKeys, domains []types.Domain, err error, errDetails string) {
	<form method="post" action={ templ.URL(fmt.Sprintf("/console/create/service-version/%s?org=%s", serviceName, orgName)) }>
		@CSRF()
		<label for="domains">Domains:</label>
		<select id="domains" name="domains">
			for _, domain := range domains {
				if domain.Verified {
					<option value={ domain.Name }>{ domain.Name }</option>
				}
			}
		</select>
		<fieldset>
			<legend>Origins:</legend>
			<label for="origins.0.host">Host:</label>
			<input type="text" id="origins.0.host" name="origins.0.host"/>
			<label for="origins.0.port">Port:</label>
			<input type="text" id="origins.0.port" name="origins.0.port"/>
			<label for="origins.0.tls">TLS:</label>
			<input type="checkbox" id="origins.0.tls" name="origins.0.tls"/>
			<label for="origins.0.verify-tls">Verify TLS:</label>
			<input type="checkbox" id="origins.0.verify-tls" name="origins.0.verify-tls"/>
		</fieldset>
		for _, vclStep := range vclSK.FieldOrder {
			<div>
				<label for={ vclSK.FieldToKey[vclStep] }>{ vclSK.FieldToKey[vclStep] }:</label>
				<textarea id={ vclSK.FieldToKey[vclStep] } name={ vclSK.FieldToKey[vclStep] } placeholder="Enter your VCL here..."></textarea>
			</div>
		}
		<input type="submit"/>
	</form>
	if err != nil {
		switch  {
			case errors.Is(err, cdnerrors.ErrInvalidFormData):
				<div>Invalid form data</div>
			case errors.Is(err, cdnerrors.ErrInvalidVCL):
				<div>Invalid VCL data</div>
				<pre>{ errDetails }</pre>
			default:
				<div>Service version creation failed</div>
		}
	}
}

templ ActivateServiceVersionContent(orgName string, serviceName string, version int64, err error) {
	<div>You are about to activate { serviceName } version { strconv.FormatInt(version, 10) }, are you sure?</div>
	<form method="post" action={ templ.URL(fmt.Sprintf("/console/services/%s/%d/activate?org=%s", serviceName, version, orgName)) }>
		@CSRF()
		<label for="confirmation">Confirmation:</label>
		<input type="checkbox" id="confirmation" name="confirmation"/>
		<input type="submit"/>
	</form>
	if err != nil {
		<div>Service version activation failed</div>
	}
}

templ LoginPage(returnTo string, loginFailed bool) {
	<h1>Login</h1>
	<h2>Local</h2>
	<form method="post" action={ templ.URL("/auth/login") }>
		@CSRF()
		if returnTo != "" {
			<input type="hidden" name="return_to" value={ returnTo }/>
		}
		<label for="username">Username:</label>
		<br/>
		<input type="text" id="username" name="username"/>
		<br/>
		<label for="password">Password:</label>
		<br/>
		<input type="password" id="password" name="password"/>
		<input type="submit" value="Login"/>
	</form>
	if loginFailed {
		<div>Login failed!</div>
	}
	<h2>OpenID Connect</h2>
	<div><a href={ templ.URL("/auth/oidc/keycloak") }>Login with Keycloak</a></div>
}

// https://templ.guide/integrations/web-frameworks/#githubcomgorillacsrf
templ CSRF() {
	<input type="hidden" name="gorilla.csrf.Token" value={ ctx.Value("gorilla.csrf.Token").(string) }/>
}
